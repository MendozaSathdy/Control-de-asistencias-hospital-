import tkinter as tk
from tkinter import messagebox
from datetime import datetime, timedelta

class Empleado:  
    def __init__(self, nombre, id_empleado, edad, fecha_nacimiento, cedula, domicilio, telefono, correo, fecha_ingreso, genero, puesto, grado_estudio, tipo_contratacion, turno="", jornada="", hora_entrada="00:00", dia_entrada="Lunes", fecha_entrada=""):
        self.nombre = nombre
        self.id_empleado = id_empleado
        self.edad = edad
        self.fecha_nacimiento = fecha_nacimiento
        self.cedula = cedula
        self.domicilio = domicilio
        self.telefono = telefono
        self.correo = correo
        self.fecha_ingreso = fecha_ingreso
        self.genero = genero
        self.puesto = puesto
        self.grado_estudio = grado_estudio
        self.tipo_contratacion = tipo_contratacion
        self.turno = turno
        self.jornada = jornada
        self.hora_entrada = hora_entrada
        self.dia_entrada = dia_entrada
        self.fecha_entrada = fecha_entrada
        self.vacaciones = {}
        self.historial_asistencias = []
        self.retardos = 0
        self.faltas = 0

class Bienvenida:
    def __init__(self, root):
        self.root = root
        self.root.title("Control de Asistencias de un Hospital")
        self.root.geometry("1000x600")
        self.empleados = []

        self.menu_frame = tk.Frame(self.root, width=200, bg="blue")  
        self.menu_frame.pack(side="left", fill="y")
        self.content_frame = tk.Frame(self.root, bg="grey")  
        self.content_frame.pack(side="right", expand=True, fill="both")

        tk.Button(self.menu_frame, text="Bienvenid@", command=self.mostrar_bienvenida, bg="blue", fg="white").pack(fill="x", pady=5)
        tk.Button(self.menu_frame, text="Datos del Empleado", command=self.mostrar_datos_trabajador, bg="blue", fg="white").pack(fill="x", pady=5)
        tk.Button(self.menu_frame, text="Turno y Horario", command=self.mostrar_turno_horario, bg="blue", fg="white").pack(fill="x", pady=5)
        tk.Button(self.menu_frame, text="Vacaciones", command=self.mostrar_vacaciones, bg="blue", fg="white").pack(fill="x", pady=5)
        tk.Button(self.menu_frame, text="Asistencias", command=self.registrar_asistencia, bg="blue", fg="white").pack(fill="x", pady=5)
        tk.Button(self.menu_frame, text="Historial", command=self.mostrar_historial, bg="blue", fg="white").pack(fill="x", pady=5)

        self.mostrar_bienvenida()

    def limpiar_seccion_actual(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def mostrar_bienvenida(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="!!Bienvenido al Control de Asistencias de un Hospital!!", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=100)

    def crear_input(self, label, var):
        frame = tk.Frame(self.content_frame, bg="grey")
        frame.pack(pady=4, fill="x")
        tk.Label(frame, text=label+":", width=25, anchor="w", bg="grey", fg="black", font=("Arial", 11, "bold")).pack(side="left", padx=5)
        tk.Entry(frame, textvariable=var, width=30, font=("Arial", 11)).pack(side="left", padx=5)

    def crear_opciones(self, label, opciones, var):
        frame = tk.Frame(self.content_frame, bg="grey")
        frame.pack(pady=4, fill="x")
        tk.Label(frame, text=label+":", width=25, anchor="w", bg="grey", fg="black", font=("Arial", 11, "bold")).pack(side="left", padx=5)
        tk.OptionMenu(frame, var, *opciones).pack(side="left", padx=5)

    def mostrar_datos_trabajador(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="Registrar Empleado", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=20)

        self.nombre_var = tk.StringVar()
        self.id_var = tk.StringVar()
        self.edad_var = tk.StringVar()
        self.fecha_nacimiento_var = tk.StringVar()
        self.cedula_var = tk.StringVar()
        self.domicilio_var = tk.StringVar()
        self.telefono_var = tk.StringVar()
        self.correo_var = tk.StringVar()
        self.fecha_ingreso_var = tk.StringVar()

        self.crear_input("Nombre completo", self.nombre_var)
        self.crear_input("ID ", self.id_var)
        self.crear_input("Edad", self.edad_var)
        self.crear_input("Fecha de Nacimiento (dd/mm/yyyy)", self.fecha_nacimiento_var)
        self.crear_input("Cédula Profesional", self.cedula_var)
        self.crear_input("Domicilio completo", self.domicilio_var)
        self.crear_input("Teléfono de contacto", self.telefono_var)
        self.crear_input("Correo Electrónico", self.correo_var)
        self.crear_input("Fecha de Ingreso (dd/mm/yyyy)", self.fecha_ingreso_var)

        self.genero_var = tk.StringVar(value="       ")
        self.crear_opciones("Género", ["Masculino", "Femenino"], self.genero_var)

        self.puesto_var = tk.StringVar(value="        ")
        self.crear_opciones("Puesto", ["Médico", "Enfermero", "Seguridad", "Limpieza", "Administrativo"], self.puesto_var)

        self.grado_estudio_var = tk.StringVar(value="          ")
        self.crear_opciones("Último Grado de Estudio", ["Secundaria", "Preparatoria", "Licenciatura","Tecnico", "Doctorado"], self.grado_estudio_var)

        self.tipo_contratacion_var = tk.StringVar(value="        ")
        self.crear_opciones("Tipo de Contratación", ["Basificados", "Homologados", "Regularizados","Contrato","Suplentes o cubreincidencias"], self.tipo_contratacion_var)

        tk.Button(self.content_frame, text="Registrar", command=self.registrar_empleado, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=15)

    def registrar_empleado(self):
        # Validar campos obligatorios
        if not self.nombre_var.get().strip() or not self.id_var.get().strip():
            messagebox.showwarning("Error", "El nombre y el ID son obligatorios")
            return
        empleado = Empleado(
            self.nombre_var.get(), self.id_var.get(), self.edad_var.get(), self.fecha_nacimiento_var.get(), self.cedula_var.get(),
            self.domicilio_var.get(), self.telefono_var.get(), self.correo_var.get(), self.fecha_ingreso_var.get(),
            self.genero_var.get(), self.puesto_var.get(), self.grado_estudio_var.get(), self.tipo_contratacion_var.get()
        )
        for emp in self.empleados:
            if emp.id_empleado == empleado.id_empleado:
                messagebox.showwarning("Error", "Ya existe un empleado con ese ID")
                return
        self.empleados.append(empleado)
        messagebox.showinfo("Éxito", "Empleado Registrado")

    def mostrar_turno_horario(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="Registro de Turno y Horario", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=20)

        self.id_turno_var = tk.StringVar()
        self.crear_input("ID del Empleado", self.id_turno_var)

        self.turno_var = tk.StringVar(value="     ")
        self.crear_opciones("Turno", ["Matutino 07:00 - 14:30", "Vespertino 14:00 - 20:30", "Nocturno 20:00 - 07:30"], self.turno_var)

        self.jornada_var = tk.StringVar(value="      ")
        self.crear_opciones("Jornada", ["A:Lunes, Miércoles, Viernes", "B:Martes, Jueves, Sábado", "C:Domingo"], self.jornada_var)

        self.hora_entrada_var = tk.StringVar(value="00:00")  
        self.crear_input("Hora de Entrada (HH:MM)", self.hora_entrada_var)

        self.dia_entrada_var = tk.StringVar(value=datetime.now().strftime("%d/%m/%Y"))
        self.crear_input("Fecha Entrada (dd/mm/yyyy)", self.dia_entrada_var)

        tk.Button(self.content_frame, text="Actualizar Turno", command=self.actualizar_turno, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=10)

    def actualizar_turno(self):
        id_turno = self.id_turno_var.get()
        for emp in self.empleados:
            if emp.id_empleado == id_turno:
                emp.turno = self.turno_var.get()
                emp.jornada = self.jornada_var.get()
                emp.hora_entrada = self.hora_entrada_var.get()
                emp.dia_entrada = self.dia_entrada_var.get()
                messagebox.showinfo("Éxito", "Turno y Horario Actualizado")
                return
        messagebox.showwarning("No encontrado", "Empleado no encontrado")

    def registrar_asistencia(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="Registro de Asistencia", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=20)

        self.id_asistencia_var = tk.StringVar()
        self.crear_input("ID del Empleado", self.id_asistencia_var)

        tk.Button(self.content_frame, text="Registrar Asistencia", command=self.validar_asistencia, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=10)

    def validar_asistencia(self):
        id_empleado = self.id_asistencia_var.get()
        now = datetime.now()
        for emp in self.empleados:
            if emp.id_empleado == id_empleado:
                try:
                    hora_esperada = datetime.strptime(emp.hora_entrada, "%H:%M")
                    # Hora actual que registra cada dia 
                    actual_hora = now.replace(year=1900, month=1, day=1)
                    tolerancia = hora_esperada + timedelta(minutes=10)  #Minutos que di o se da de tolerancia dentro del mi control de asistencias 
                    if actual_hora <= tolerancia:
                        estado = "A tiempo"
                    else:
                        emp.retardos += 1
                        if emp.retardos > 3:
                            estado = "Falta por exceso de retardos"
                            emp.faltas += 1
                        else:
                            estado = "Retardo"
                    emp.historial_asistencias.append((now.strftime("%d/%m/%Y %H:%M"), estado))
                    messagebox.showinfo("Registro", f"Asistencia registrada: {estado}")
                except Exception as e:
                    messagebox.showerror("Error", f"Datos de horario no válidos: {e}")
                return
        messagebox.showwarning("No encontrado", "Empleado no encontrado")

    def mostrar_historial(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="Historial de Asistencia", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=10)
        self.id_buscar_var = tk.StringVar()
        frame = tk.Frame(self.content_frame, bg="grey")
        frame.pack(pady=5)
        tk.Label(frame, text="Ingrese ID del Empleado:", font=("Arial", 12), bg="grey", fg="black").pack(side="left", padx=5)
        tk.Entry(frame, textvariable=self.id_buscar_var, font=("Arial", 12), width=25).pack(side="left", padx=5)
        tk.Button(self.content_frame, text="Buscar", command=self.mostrar_historial_empleado, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=10)

    def mostrar_historial_empleado(self):
        id_buscar = self.id_buscar_var.get()
        for emp in self.empleados:
            if emp.id_empleado == id_buscar:
                self.limpiar_seccion_actual()

                ahora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                tk.Label(self.content_frame, text=f"Fecha y hora actual: {ahora}", font=("Arial", 10, "italic"), bg="grey", fg="black").pack(pady=5)

                # Dentro de ello agregue y cambie la estructura un poco ya que ahora tiene tiempo y cambia por los turnos y horarios que tiene el empleado 
                tk.Label(self.content_frame, text="Datos Personales", font=("Arial", 14, "underline", "bold"), bg="grey", fg="black").pack(anchor="w", padx=10)
                datos = (
                    f"Nombre completo: {emp.nombre}\n"
                    f"ID único: {emp.id_empleado}\n"
                    f"Edad: {emp.edad}\n"
                    f"Fecha de Nacimiento: {emp.fecha_nacimiento}\n"
                    f"Cédula Profesional: {emp.cedula}\n"
                    f"Domicilio: {emp.domicilio}\n"
                    f"Teléfono: {emp.telefono}\n"
                    f"Correo Electrónico: {emp.correo}\n"
                    f"Fecha de Ingreso: {emp.fecha_ingreso}\n"
                    f"Género: {emp.genero}\n"
                    f"Puesto: {emp.puesto}\n"
                    f"Último Grado de Estudio: {emp.grado_estudio}\n"
                    f"Tipo de Contratación: {emp.tipo_contratacion}\n"
                )
                tk.Label(self.content_frame, text=datos, font=("Arial", 11), bg="grey", fg="black", justify="left").pack(anchor="w", padx=20)

                tk.Label(self.content_frame, text="Turno y Horario", font=("Arial", 14, "underline", "bold"), bg="grey", fg="black").pack(anchor="w", padx=10, pady=(10,0))
                turno = (
                    f"Turno asignado: {emp.turno}\n"
                    f"Jornada: {emp.jornada}\n"
                    f"Hora de Entrada: {emp.hora_entrada}\n"
                    f"Día de Entrada: {emp.dia_entrada}\n"
                )
                tk.Label(self.content_frame, text=turno, font=("Arial", 11), bg="grey", fg="black", justify="left").pack(anchor="w", padx=20)

                tk.Label(self.content_frame, text="Vacaciones", font=("Arial", 14, "underline", "bold"), bg="grey", fg="black").pack(anchor="w", padx=10, pady=(10,0))
                if emp.vacaciones:
                    vacaciones_text = (
                        f"Primer Periodo: {emp.vacaciones.get('Primer Periodo', 'No asignado')}\n"
                        f"Segundo Periodo: {emp.vacaciones.get('Segundo Periodo', 'No asignado')}\n"
                    )
                else:
                    vacaciones_text = "No tiene vacaciones registradas."
                tk.Label(self.content_frame, text=vacaciones_text, font=("Arial", 11), bg="grey", fg="black", justify="left").pack(anchor="w", padx=20)

                # Sección de Retardos y Faltas que tiene el empleado si llega tarde 
                tk.Label(self.content_frame, text="Control de Retardos y Faltas", font=("Arial", 14, "underline", "bold"), bg="grey", fg="black").pack(anchor="w", padx=10, pady=(10,0))
                retardos_faltas = (
                    f"Retardos acumulados: {emp.retardos} (máximo permitido: 3)\n"
                    f"Faltas acumuladas: {emp.faltas}\n"
                )
                tk.Label(self.content_frame, text=retardos_faltas, font=("Arial", 11), bg="grey", fg="black", justify="left").pack(anchor="w", padx=20)

                # Historial de Asistencias que agregue al codigo del anterior 
                tk.Label(self.content_frame, text="Historial de Asistencias", font=("Arial", 14, "underline", "bold"), bg="grey", fg="black").pack(anchor="w", padx=10, pady=(10,0))
                historial_asist = "\n".join([f"{fecha} - {estado}" for fecha, estado in emp.historial_asistencias])
                if not historial_asist:
                    historial_asist = "Sin registros de asistencias."
                tk.Label(self.content_frame, text=historial_asist, font=("Arial", 11), bg="grey", fg="black", justify="left").pack(anchor="w", padx=20)

                return
        messagebox.showwarning("No encontrado", "Empleado no encontrado")

    def mostrar_vacaciones(self):
        self.limpiar_seccion_actual()
        tk.Label(self.content_frame, text="Registro de Vacaciones", font=("Arial", 18, "bold"), bg="grey", fg="black").pack(pady=20)
        self.id_vacaciones_var = tk.StringVar()
        self.crear_input("ID del Empleado", self.id_vacaciones_var)

        periodos_1 = [
            "1 Ene - 15 Ene", "16 Ene - 30 Ene", "1 Feb - 15 Feb", "16 Feb - 28 Feb", "1 Mar - 15 Mar", "16 Mar - 31 Mar",
            "1 Abr - 15 Abr", "16 Abr - 30 Abr", "1 May - 15 May", "16 May - 31 May", "1 Jun - 15 Jun", "16 Jun - 30 Jun"
        ]
        periodos_2 = [
            "1 Jul - 15 Jul", "16 Jul - 31 Jul", "1 Ago - 15 Ago", "16 Ago - 31 Ago", "1 Sep - 15 Sep", "16 Sep - 30 Sep",
            "1 Oct - 15 Oct", "16 Oct - 31 Oct", "1 Nov - 15 Nov", "16 Nov - 30 Nov", "1 Dic - 15 Dic", "16 Dic - 31 Dic"
        ]

        self.periodo_1_var = tk.StringVar(value=periodos_1[0])
        self.crear_opciones("Primer Periodo (Ene-Jun)", periodos_1, self.periodo_1_var)

        self.periodo_2_var = tk.StringVar(value=periodos_2[0])
        self.crear_opciones("Segundo Periodo (Jul-Dic)", periodos_2, self.periodo_2_var)

        tk.Button(self.content_frame, text="Guardar Vacaciones", command=self.guardar_vacaciones, bg="blue", fg="white", font=("Arial", 12, "bold")).pack(pady=10)

    def guardar_vacaciones(self):
        id_empleado = self.id_vacaciones_var.get()
        for emp in self.empleados:
            if emp.id_empleado == id_empleado:
                emp.vacaciones = {
                    "Primer Periodo": self.periodo_1_var.get(),
                    "Segundo Periodo": self.periodo_2_var.get()
                }
                messagebox.showinfo("Éxito", "Vacaciones registradas correctamente")
                return
        messagebox.showwarning("No encontrado", "Empleado no encontrado")

root = tk.Tk()
app = Bienvenida(root)
root.mainloop()

"""Dentro de este codigo cambie y modifique la funcion mostrar historial para que aparezca el tiempo actual arriba ayudandome con la biblioteca 
o modulo que viene incluido con python esta nos sirve para poner o obtener la fecha y hora actual dentro de esta hay dos clases que una sirve con lo anterior 
y la otra sirve para sumar o restar tiempo a una fecha u hora esto lo use principalmente para la funcion validar asistencia para poder ver si el empleado
llego a tiempo o con retardo segun la hora y turno que le corresponde o selecciono y para tomar tiempo de tolerancia con su permiso dentro de mi codigo y lo que agregue 
fue el boton del lado lateral  que fue "Asistencias" que dentro de ello fue los retardos, faltas y el historial de asistecial con la fecha en tiempo y forma 
y si no hay asistencias aún todavia indica o da mensaje de "Sin registros de asistencias" """

"""En mi codigo mejore los datos del empleado y todos las ventanas trate de alinear y formar bien lo que le pide al empleado o al usuario para que aparezcan 
de forma ordenada incluyendo titulos al igual que agregue cosas que me faltaban o que quise agregar que fue en grado de estudio ingrese tambien "Tecnico" y lo de tipo de contratacion fue "Suplentes o cubreincidencias" """

"""En validar asistencias en la funcion que le meti agregue un contador para los retardos y faltas """
